Program to implement Naive Bayes classification using any dataset Input:
from sklearn.datasets import load iris
from sklearn. model selection import train test split
from sklearn.naive_bayes import GaussianNB
X, y=load_iri s(return_X_y=T rue)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.5,random_state=0) 
gnb=GaussianNB()
y_pred=gnb. fit(X_train, y_train). predict(X_test)
print(y_pred)
x_new=[[5,5,4,4]]
y_new=gnb. fit(X_train, y_train). predict(x_new)
print("predicted output for [[5,5,4,4]]:",y_new)
print("Naive bayes score : ",gnb.score(X_test,y_test))




Title: Support Vector Machine
Objectives: Program to implement text classification using support vector machine
Input:
from sklearn import datasets 
from sklearn.model_selection import train_test_split 
from sklearn import metrics 
from sklearn import svm 
cancer=datasets.load_breast_cancer()
x_train,x_test,y_train,y_test=train_test_split(cancer.data,cancer.target,test_size=0.3,random_
state=109)
clf=svm.SVC(kernel='linear')
clf.fit(x_train,y_train) 
y_pred=clf.predict(x_test)
print("Actual values",y_test)
print("Predicted values",y_pred) 
print("Accuracy:",metrics.accuracy_score(y_test,y_pred)) 
print("Precision:",metrics.precision_score(y_test,y_pred))
print("Recall:",metrics.recall_score(y_test,y_pred))






MATRIX


import numpy as np
def create_matrix(mc):
print("Array"+str(mc)+"Elements")
array_1=map(int,input().split())
array_1=np.array(list(array_1))
print("\narray"+str(mc+"Rowcolumns:)
row,column=map(int,input().split())
if(len(array_1)!=(row*column)):
print("Row_column size do notmatch")
return create_matrix(mc)
array_1=array_1.reshape(row, column)
print("\n array"+str(mc))
print(array_1)
return array_1
arr1=create_matrix(1)
arr2=create_matrix(2)
if(arr1.shape==arr2.shape):
print("Dot Product")
print(np.dot(arr1, arr2))
else:
print("Dimension do not match")







TOOLKIT


N-Gram Language Modeling with NLTK
from nltk import ngrams
sentence = input("Enter the sentence: ")
n = int(input("Enter the value of n: "))
n_grams = ngrams(sentence.split(), n)
print("ngrams printing")
for grams in n_grams:
print(grams)

#Tokenization
from nltk import word_tokenize, sent_tokenize
print("toens printing")
print(word_tokenize(sentence))
print(sent_tokenize(sentence))

# Part of Speech Tagging
from nltk import pos_tag
tokenized_text=word_tokenize(sentence)
tags = tokens_tag = pos_tag(tokenized_text)
print(tags)

#stemming/lemmetization

nltk.download('wordnet')
from nltk.stem import WordNetLemmatizer
from nltk.stem import PorterStemmer
ps = PorterStemmer()
for w in tokenized_text:
print(w, " : ", ps.stem(w))